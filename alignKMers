#!/usr/bin/ruby
require "DNATOOLBOX.rb"
NUMARGV=2;
if ARGV.length()<NUMARGV  || ARGV[0]=~/^--?[h?]/
	print("Usage: alignKMers -i <inFile> -o <outFile> -l <logFile> -v <minOverlap> -m <mismatchPenalty>\n");
	print(" -i <inFile> = unaligned k-mers\n");
	print(" -v <minOverlap> = minimum overlap to align [default=3]\n");
	print(" -r = also reverse complement\n");
	print(" -m <mismatchPenalty> = penalty for mismatches [default=1]\n");
	print(" -i <inFile> = \n");
	print(" -o <outFile> = where to output results [default=stdout]\n");
	print(" -l <logFile> = where to output results [default=stderr]\n");
	exit;
end
require "SWITCHES.rb";
switches = parseSwitches(ARGV[0,ARGV.length()-0], {"verb"=>0,'i'=>1,'m'=>1,'v'=>1,'l'=>1,'o'=>1,'r'=>0});
switches = getDefaults(switches,{'m'=>1,'v'=>3});
verbose = !switches["verb"].nil?
minOverlap=switches['v'].to_i();
mmPenalty=switches['m'].to_i();
doRC = !switches['r'].nil?;
outFP=switches['o'];
logFP=switches['l'];
if outFP.nil?
	outFile=$stdout;
else
	outFile=File.open(outFP,"w");
end
if logFP.nil?
	logFile=$stderr;
else
	logFile=File.open(logFP,"w");
end

def scoreAlign(k1,k2,mmPenalty,offset)
	score=0;
	if offset<0
		temp=k1;
		k1=k2;
		k2=temp;
		offset=-offset;
	end
	offset.upto([k1.length(),k2.length()+offset].min()-1){|i|
		#print("[#{k1[i,1]},#{k2[i-offset,1]}] ");
		if k1[i,1].nil? ||  k2[i-offset,1].nil? || k1[i,1]=="-" || k2[i-offset,1]=="-"
		elsif k1[i,1]==k2[i-offset,1]
			score+=1;
		else
			score-=mmPenalty;
		end
	}
	#logFile.print([k1,k2,offset,score,"\n"]);
	return score;
end

def alignKMers(k1, k2,minOverlap, mmPenalty)
	score=0;
	offset=nil;
	(minOverlap-k2.length()).upto(k1.length-minOverlap){|i|
		curScore = scoreAlign(k1,k2,mmPenalty,i);
		if curScore>score
			score=curScore;
			offset=i;
		#the following led to repetitive sequences not being merged - pick first instead
		#elsif curScore==score #there's a tie in the alignment
		#	offset=nil;
		end
	}
	return [score,offset];
end

class MotGroup
	def initialize(str)
		@consensus = str;
		@allKMers = [str];
	end
	def revcomp!()
		@consensus = revcomp(@consensus);
		0.upto(@allKMers.length()-1){|i|
			@allKMers[i] = revcomp(@allKMers[i]);
		}
	end
	def expandLeft(n)
		@consensus = "-"*n+@consensus;
		@allKMers.map!(){|k| "-"*n+k};
	end
	def expandRight(n)
		@consensus =@consensus+ "-"*n;
		@allKMers.map!(){|k| k+"-"*n};
	end
	def deep_dup()
		return Marshal.load(Marshal.dump(self));
	end
	def merge(motG,offset)
		str=motG.getConsensus();
		if offset<0
			self.expandLeft(-offset);
		elsif offset>0
			motG.expandLeft(offset);
		end
		str=motG.getConsensus();

		if str.length()>@consensus.length()
			self.expandRight(str.length()-@consensus.length());
		elsif str.length()<@consensus.length()
			motG.expandRight(@consensus.length()-(str.length()));
		end
		motG.allKMers.each{|str|
			@allKMers.push(str);
		}
		self.makeNewConsensus();
	end
	def makeNewConsensus()
		len=@consensus.length();
		@consensus=""
		0.upto(len-1){|i|
			opts=Hash.new();
			0.upto(@allKMers.length()-1){|j|
				if @allKMers[j][i,1]!="-"
					if opts[@allKMers[j][i,1]].nil?
						opts[@allKMers[j][i,1]]=0;
					end
					opts[@allKMers[j][i,1]]+=1;
				end
			}
			maxNum=0
			theMax="-";
			opts.keys.each{|b|
				if opts[b]>maxNum
					maxNum=opts[b];
					theMax=b;
				end
			}
			@consensus+=theMax;
		}
	end

	def length();
		return @consensus.length();
	end
	def getConsensus();
		return @consensus;
	end
	def to_s()
		s="consensus: #{@consensus}\n#{@allKMers.join("\n")}\n";
	end
	attr_accessor :allKMers;
end

inFP = switches['i'];
grouped=[];
File.foreach(inFP){|line|
	line.chomp!();
	next if line.nil? || line=="";
	grouped.push(MotGroup.new(line));
}
changed=true;
while(changed)
	changed=false;
	bestHitScore=[0]*grouped.length();
	bestHitMatch=[nil]*grouped.length();
	bestHitOffset=[nil]*grouped.length();
	bestHitRC=[false]*grouped.length();

	0.upto(grouped.length()-2){|j|
		(j+1).upto(grouped.length()-1){|i|
			score,offset = alignKMers(grouped[i].getConsensus(), grouped[j].getConsensus(), minOverlap, mmPenalty); #offsets are relative to the first sequence
			isRC=false
			if doRC
				scoreRC,offsetRC = alignKMers(revcomp(grouped[i].getConsensus()), grouped[j].getConsensus(), minOverlap, mmPenalty);
				if scoreRC>score
					score=scoreRC;
					offset = offsetRC;
					isRC=true;
				end
			end
			if bestHitScore[i]<score && bestHitScore[j]<score # a superior pairing
				logFile.print("New best for i=#{i}, j=#{j}, score=#{score} oldi=#{bestHitMatch[i]}, oldj=#{bestHitMatch[j]}, oldScorei=#{ bestHitScore[i]}, oldScorej=#{ bestHitScore[j]}, consi=#{grouped[i].getConsensus()}, consj=#{grouped[j].getConsensus()}, RC=#{isRC.to_s}") if verbose;
				bestHitRC[i]= isRC;
				bestHitRC[j]= isRC;
				bestHitScore[i]=score;
				bestHitScore[j]=score;
				if offset.nil? # offset is nil if there are multiple equivalent ways of aligning the two or if there are no good alignments (score>0)
					bestHitMatch[i]=nil;
					bestHitMatch[j]=nil;
				else
					bestHitMatch[i]=j;
					bestHitMatch[j]=i;
					bestHitOffset[i]=offset;
					if isRC # this offset is relative to the source sequence, in this case j and when RCed, this is reversed
						scoreRCB,offsetRCB = alignKMers(revcomp(grouped[j].getConsensus()), grouped[i].getConsensus(), minOverlap, mmPenalty);
						if offsetRCB != grouped[j].length() -grouped[i].length() +offset
							raise("Offset j is being calculated wrong: #{grouped[j].length() -grouped[i].length() +offset} should be #{offsetRCB}; offseti=#{offset}, len(i)=#{grouped[i].length()}, len(j)=#{grouped[j].length()} for seqi=#{grouped[i].getConsensus()} seqj=#{revcomp(grouped[j].getConsensus())}") if verbose;
						end
						bestHitOffset[j]= grouped[j].length() -grouped[i].length() +offset
					else
						bestHitOffset[j]=-offset;
					end
				end
			elsif bestHitScore[i]<=score &&  bestHitScore[j]<=score # an at least equivalent pairing for both
				if !offset.nil?
					qs = [i,j]; # allows me to test if both i and j have a beter match than this one using the same code
					0.upto(1){|q|
						qi = qs[q];
						qj=qs[1-q];
						if bestHitScore[qi]==score && !bestHitMatch[qi].nil? #i has an equiv match, see if j still matches i and its match {
							tempX = grouped[qi].deep_dup();
							logFile.print("Test merging #{tempX.getConsensus()} with #{grouped[bestHitMatch[qi]].getConsensus()} at #{ bestHitOffset[qi]} for #{qi}") if verbose;
							if bestHitRC[qi]
								tempX.revcomp!()
								logFile.print("... RC is #{tempX.getConsensus()}") if verbose;
								scoreRCTest,offsetRCTest = alignKMers(tempX.getConsensus(), grouped[bestHitMatch[qi]].getConsensus(), minOverlap, mmPenalty);
								if scoreRCTest!=score
									raise("Managed to screw this up already");
								elsif offsetRCTest != bestHitOffset[qi]
									raise("Sequences not aligned properly.  Offset is #{bestHitOffset[qi]}, should be #{offsetRCTest}");
								end
								tempX.merge(grouped[bestHitMatch[qi]].deep_dup(), bestHitOffset[qi]);
							else
								tempX.merge(grouped[bestHitMatch[qi]].deep_dup(), bestHitOffset[qi]);
							end
							logFile.print("... got #{tempX.getConsensus()}") if verbose;
							if isRC ^ bestHitRC[qi] #xor: if only one was RCed
								logFile.print("... checking to see if alignment of #{tempX.getConsensus()} and #{revcomp(grouped[qj].getConsensus())} is still good (RC).") if verbose;
								scoreM,offsetM = alignKMers(tempX.getConsensus(), revcomp(grouped[qj].getConsensus()), minOverlap, mmPenalty);
							else
								logFile.print("... checking to see if alignment of #{tempX.getConsensus()} and #{grouped[qj].getConsensus()} is still good.") if verbose;
								scoreM,offsetM = alignKMers(tempX.getConsensus(), grouped[qj].getConsensus(), minOverlap, mmPenalty);
							end
							if scoreM>=score
								logFile.print("Special case tie for m[i]<=>i<=>j, dropping i<=>j: i=#{qi}, j=#{qj}, score=#{score} oldi=#{bestHitMatch[qi]}, oldj=#{bestHitMatch[qj]}, oldScorei=#{bestHitScore[qi]}, oldScorej=#{bestHitScore[qj]}, consi=#{grouped[qi].getConsensus()}, consj=#{grouped[qj].getConsensus()}, isRC.to_s}") if verbose;
								#keep the original matching
								bestHitMatch[qj]=nil;
								bestHitScore[qj]=score; #hold this spot for the next round
							else
								logFile.print("i has a match, but joining them destroys match with j; dropping all: i=#{qi}, j=#{qj}, score=#{score} oldi=#{bestHitMatch[qi]}, oldj=#{bestHitMatch[qj]}, oldScorei=#{bestHitScore[qi]}, oldScorej=#{bestHitScore[qj]}, consi=#{grouped[qi].getConsensus()}, consj=#{grouped[qj].getConsensus()}, RC=#{isRC.to_s}") if verbose;
								bestHitScore[qi]=score;
								bestHitScore[qj]=score;
								bestHitMatch[qi]=nil;
								bestHitMatch[qj]=nil;
							end
						end #}
					}
				end
			elsif bestHitScore[j]<=score #tie for j, worse for i
				logFile.print("Tie with j=#{j}, worse for i=#{i}, score=#{score} oldj=#{bestHitMatch[j]}, oldscorei=#{bestHitScore[i]}") if verbose;
				bestHitScore[j]=score;
				bestHitMatch[j]=nil;
			elsif bestHitScore[i]<=score #tie for i, worse for j
				logFile.print("Tie with i=#{i}, worse for j=#{j}, score=#{score} oldi=#{bestHitMatch[i]}, oldscorej=#{bestHitScore[j]}") if verbose;
				bestHitScore[i]=score;
				bestHitMatch[i]=nil;
			end
		}
	}
	logFile.print("bestHitScore="+bestHitScore.join("\t")+"\n") if verbose;
	logFile.print("bestHitMatch="+bestHitMatch.join("\t")+"\n") if verbose;
	logFile.print("bestHitOffset="+bestHitOffset.join("\t")+"\n") if verbose;
	logFile.print("bestHitRC="+bestHitRC.join("\t")+"\n") if verbose;
	j=0;
	while (j<grouped.length())
		if !bestHitMatch[j].nil? && !bestHitMatch[bestHitMatch[j]].nil? && bestHitScore[j]>=minOverlap && bestHitMatch[bestHitMatch[j]]==j
			#i and j match, are mutual best hits, and overlap by the required amount
			i=bestHitMatch[j];
			logFile.print("Proposed merger #{j.to_s}:#{grouped[j].getConsensus()}-#{bestHitRC[j].to_s} and #{i.to_s}:#{grouped[i].getConsensus()}-#{bestHitRC[i].to_s} with an offset of #{bestHitOffset[j].to_s}") if verbose;
			if bestHitRC[j] # offset is already relative to the RC
				logFile.print("RCing #{grouped[j].getConsensus()}") if verbose;
				grouped[j].revcomp!()
				logFile.print("... to get #{grouped[j].getConsensus()}") if verbose;
				#bestHitOffset[j] = -bestHitOffset[j];
			end
			raise("ERROR: not self pointing: i=#{i}=>#{bestHitMatch[i]} j=#{j}=>#{i}") if bestHitMatch[i]!=j;
			raise("ERROR: RC state of both oligos is not the same for #{i.to_s()}:#{grouped[i].getConsensus()}-#{bestHitRC[i].to_s()} and #{j.to_s()}:#{grouped[j].getConsensus()}-#{bestHitRC[j].to_s()}") if bestHitRC[i]!=bestHitRC[j];
			raise("ERROR: i<=j: i=#{i} j=#{j}") if i<=j;
			changed=true;
			logFile.print("Merging #{j.to_s}:#{grouped[j].getConsensus()} and #{i.to_s}:#{grouped[i].getConsensus()} with an offset of #{bestHitOffset[j].to_s}") if verbose;
			grouped[j].merge(grouped[i], bestHitOffset[j]);
			logFile.print("Yielded #{grouped[j].getConsensus()}") if verbose;
			grouped[i]=nil;
			bestHitOffset[i]=nil;
			bestHitMatch[i]=nil;
			bestHitScore[i]=nil;
			bestHitOffset[j]=nil;
			bestHitMatch[j]=nil;
			bestHitScore[j]=nil;
		else
			j=j+1;
		end
	end
	(grouped.length()-1).downto(0){|i|
		if grouped[i].nil?
			grouped.delete_at(i);
		end
	}
end

grouped.sort!(){|a,b| b.allKMers.length() <=> a.allKMers.length()};
grouped.each(){|g|
	outFile.print(g.to_s());
}

